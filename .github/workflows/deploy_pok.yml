name: Deploy pok

on: workflow_call

jobs:
  deploy:
    if: ${{ !startsWith(github.head_ref, 'release-please') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy docker compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml'
          target: '/pok'

      - name: Copy pok
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: '/pok/drizzle.config.ts,/pok/db,/pok/package.json,pok/src/utils/constants.js'
          target: '/pok/pok'

      - name: Start execution sequence
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /pok

            echo "localhost:5432:${{ secrets.POSTGRES_DB }}:${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}" >> ~/.pgpass
            chmod 600 ~/.pgpass
            pg_dump -h localhost -f /pok/backups/${{ secrets.POSTGRES_DB }}-pre-version-$(date +%F-%T).sql -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} -w

            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            nvm install 20

            cd /pok/pok
            npm install drizzle-kit
            cd /pok

            echo ENV=prod > /pok/.env
            echo POSTGRES_HOST=localhost >> /pok/.env
            echo POSTGRES_DB="${{ secrets.POSTGRES_DB }}" >> /pok/.env
            echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> /pok/.env
            echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> /pok/.env
            echo OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" >> /pok/.env
            echo GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" >> /pok/.env
            echo REDIS_HOST=localhost >> /pok/.env
            echo REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" >> /pok/.env
            echo IMAGEN_HOST=127.0.0.1 >> /pok/.env
            echo PLATFORM=aarch64 >> /pok/.env

            cp /pok/.env /pok/pok/.env

            history -c
            history -w

            sudo docker compose pull api
            sudo docker compose stop api cache

            cd /pok/pok
            npm run db:migrate
            cd /pok

            sudo docker compose up api cache -d
            sudo docker image prune -f

            mkdir -p /pok/backups
            crontab -l > /pok/mycron
            cron_job1="0 6 * * *  pg_dump -h localhost -f /pok/backups/${{ secrets.POSTGRES_DB }}-full-\$(date +\%F).sql -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} -w"
            cron_job2="30 6 * * * cp /pok/backups/${{ secrets.POSTGRES_DB }}-full-\$(date +\%F).sql /pg-backups"
            grep -qxF "$cron_job1" /pok/mycron || echo "$cron_job1" >> /pok/mycron
            grep -qxF "$cron_job2" /pok/mycron || echo "$cron_job2" >> /pok/mycron
            crontab /pok/mycron
            rm /pok/mycron
