name: Deploy

on: workflow_call

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml,drizzle.config.ts,db,package.json'
          target: '/pok'

      - name: Copy constants
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'src/utils/constants.js'
          target: '/pok'

      - name: Start execution sequence
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /pok

            echo "localhost:5432:${{ secrets.POSTGRES_DB }}:${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}" >> ~/.pgpass
            chmod 600 ~/.pgpass
            pg_dump -h localhost -f /pok/backups/${{ secrets.POSTGRES_DB }}-pre-version-$(date +%F-%T).sql -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} -w

            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            nvm install 20
            npm update drizzle-kit

            echo POSTGRES_HOST=localhost > /pok/.env
            echo POSTGRES_DB="${{ secrets.POSTGRES_DB }}" >> /pok/.env
            echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> /pok/.env
            echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> /pok/.env
            echo POSTGRES_PASSWORD="${{ secrets.GROQ_API_KEY }}" >> /pok/.env
            history -c
            history -w

            sudo docker compose pull api
            sudo docker compose stop api
            npm run db:migrate
            sudo docker compose up -d
            sudo docker image prune -f

            mkdir -p /pok/backups
            crontab -l > /pok/mycron
            cron_job1="0 6 * * *  pg_dump -h localhost -f /pok/backups/${{ secrets.POSTGRES_DB }}-full-\$(date +\%F).sql -U ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRES_DB }} -w"
            cron_job2="30 6 * * * cp /pok/backups/${{ secrets.POSTGRES_DB }}-full-\$(date +\%F).sql /pg-backups"
            grep -qxF "$cron_job1" /pok/mycron || echo "$cron_job1" >> /pok/mycron
            grep -qxF "$cron_job2" /pok/mycron || echo "$cron_job2" >> /pok/mycron
            crontab /pok/mycron
            rm /pok/mycron
