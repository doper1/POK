name: Deploy

on:
  workflow_run:
    workflows: ['Release']
    types: [completed]
    branches:
      - 'main'

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: ./docker-compose.yml
          target: /pok/docker-compose.yml

      - uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: ./drizzle.config.ts
          target: /pok/docker-compose.yml

      - uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: ./db
          target: /pok/db

      - uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: ./package.json
          target: /pok/package.json

      - name: install drizzle-kit
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /pok
            npm update drizzle-kit

      - name: Create a .env file on the server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            touch .env
            echo POSTGRES_HOST=localhost >> /pok/.env
            echo POSTGRES_DB="$POSTGRES_DB" >> /pok/.env
            echo POSTGRES_USER="$POSTGRES_USER" >> /pok/.env
            echo POSTGRES_PASSWORD="$POSTGRES_PASSWORD" >> /pok/.env

      - name: stop the api container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /pok 
            docker compose stop api

      - name: push migrations to Database
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /pok
            npm run db:push

      - name: stop the api container
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_1 }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            cd /pok 
            docker compose up --pull always -d

        # Update documentation if needed
        # This with act
        # Bundle everything in commits and test realtime!
